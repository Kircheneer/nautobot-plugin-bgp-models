# Generated by Django 3.1.8 on 2021-05-07 16:12

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields
import nautobot.dcim.fields
import nautobot.extras.models.statuses
import nautobot.utilities.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("extras", "0004_populate_default_status_records"),
        ("ipam", "0002_initial_part_2"),
    ]

    operations = [
        migrations.CreateModel(
            name="AutonomousSystem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("asn", nautobot.dcim.fields.ASNField(unique=True)),
                ("description", models.CharField(blank=True, max_length=200)),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_bgp_models_autonomoussystem_related",
                        to="extras.status",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "BGP autonomous system",
                "ordering": ["asn"],
            },
        ),
        migrations.CreateModel(
            name="PeeringRole",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("color", nautobot.utilities.fields.ColorField(default="9e9e9e", max_length=6)),
                ("description", models.CharField(blank=True, max_length=200)),
            ],
            options={
                "verbose_name": "BGP peering role",
            },
        ),
        migrations.CreateModel(
            name="PeerGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("enabled", models.BooleanField(default=True)),
                ("update_source_object_id", models.UUIDField(blank=True, null=True)),
                ("maximum_paths_ibgp", models.IntegerField(blank=True, null=True)),
                ("maximum_paths_ebgp", models.IntegerField(blank=True, null=True)),
                ("maximum_paths_eibgp", models.IntegerField(blank=True, null=True)),
                ("maximum_prefix", models.IntegerField(blank=True, null=True)),
                ("multipath", models.BooleanField(blank=True, null=True)),
                ("bfd_multiplier", models.IntegerField(blank=True, null=True)),
                ("bfd_minimum_interval", models.IntegerField(blank=True, null=True)),
                ("bfd_fast_detection", models.BooleanField(blank=True, null=True)),
                ("import_policy", models.CharField(blank=True, default="", max_length=100)),
                ("export_policy", models.CharField(blank=True, default="", max_length=100)),
                ("enforce_first_as", models.BooleanField(blank=True, null=True)),
                ("send_community", models.BooleanField(blank=True, null=True)),
                ("device_object_id", models.UUIDField()),
                ("name", models.CharField(max_length=100)),
                (
                    "autonomous_system",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nautobot_bgp_models.autonomoussystem",
                    ),
                ),
                (
                    "device_content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "device")),
                                models.Q(("app_label", "virtualization"), ("model", "virtualmachine")),
                                _connector="OR",
                            )
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="peer_groups",
                        to="nautobot_bgp_models.peeringrole",
                    ),
                ),
                (
                    "router_id",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.ipaddress"
                    ),
                ),
                (
                    "update_source_content_type",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "interface")),
                                models.Q(("app_label", "virtualization"), ("model", "vminterface")),
                                _connector="OR",
                            )
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.vrf"
                    ),
                ),
            ],
            options={
                "verbose_name": "BGP peer group",
                "ordering": ["device_content_type", "device_object_id", "name"],
                "unique_together": {("device_content_type", "device_object_id", "name")},
            },
        ),
        migrations.CreateModel(
            name="PeerEndpoint",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("enabled", models.BooleanField(default=True)),
                ("update_source_object_id", models.UUIDField(blank=True, null=True)),
                ("maximum_paths_ibgp", models.IntegerField(blank=True, null=True)),
                ("maximum_paths_ebgp", models.IntegerField(blank=True, null=True)),
                ("maximum_paths_eibgp", models.IntegerField(blank=True, null=True)),
                ("maximum_prefix", models.IntegerField(blank=True, null=True)),
                ("multipath", models.BooleanField(blank=True, null=True)),
                ("bfd_multiplier", models.IntegerField(blank=True, null=True)),
                ("bfd_minimum_interval", models.IntegerField(blank=True, null=True)),
                ("bfd_fast_detection", models.BooleanField(blank=True, null=True)),
                ("import_policy", models.CharField(blank=True, default="", max_length=100)),
                ("export_policy", models.CharField(blank=True, default="", max_length=100)),
                ("enforce_first_as", models.BooleanField(blank=True, null=True)),
                ("send_community", models.BooleanField(blank=True, null=True)),
                ("device_object_id", models.UUIDField(blank=True, null=True)),
                (
                    "autonomous_system",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nautobot_bgp_models.autonomoussystem",
                    ),
                ),
                (
                    "device_content_type",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "device")),
                                models.Q(("app_label", "virtualization"), ("model", "virtualmachine")),
                                _connector="OR",
                            )
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "local_ip",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bgp_peer_endpoints",
                        to="ipam.ipaddress",
                    ),
                ),
                (
                    "peer_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="peer_endpoints",
                        to="nautobot_bgp_models.peergroup",
                    ),
                ),
                (
                    "router_id",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.ipaddress"
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
                (
                    "update_source_content_type",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "interface")),
                                models.Q(("app_label", "virtualization"), ("model", "vminterface")),
                                _connector="OR",
                            )
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "vrf",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to="ipam.vrf"
                    ),
                ),
            ],
            options={
                "verbose_name": "BGP peer endpoint",
                "ordering": ["device_content_type", "device_object_id", "peer_group", "local_ip"],
            },
        ),
        migrations.CreateModel(
            name="PeerSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                (
                    "_authentication_key",
                    django_cryptography.fields.encrypt(models.CharField(blank=True, default="", max_length=200)),
                ),
                (
                    "endpoint_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoints_a",
                        to="nautobot_bgp_models.peerendpoint",
                    ),
                ),
                (
                    "endpoint_z",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoints_z",
                        to="nautobot_bgp_models.peerendpoint",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="nautobot_bgp_models.peeringrole"
                    ),
                ),
                (
                    "status",
                    nautobot.extras.models.statuses.StatusField(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="nautobot_bgp_models_peersession_related",
                        to="extras.status",
                    ),
                ),
            ],
            options={
                "verbose_name": "BGP peer session",
                "unique_together": {("endpoint_a", "endpoint_z")},
            },
        ),
        migrations.CreateModel(
            name="AddressFamily",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("afi_safi", models.CharField(max_length=64)),
                ("device_object_id", models.UUIDField()),
                ("import_policy", models.CharField(blank=True, default="", max_length=100)),
                ("export_policy", models.CharField(blank=True, default="", max_length=100)),
                ("redistribute_static_policy", models.CharField(blank=True, default="", max_length=100)),
                (
                    "device_content_type",
                    models.ForeignKey(
                        limit_choices_to=models.Q(
                            models.Q(
                                models.Q(("app_label", "dcim"), ("model", "device")),
                                models.Q(("app_label", "virtualization"), ("model", "virtualmachine")),
                                _connector="OR",
                            )
                        ),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "peer_endpoint",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_bgp_models.peerendpoint",
                    ),
                ),
                (
                    "peer_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="nautobot_bgp_models.peergroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "BGP address-family",
                "verbose_name_plural": "BGP address-families",
                "unique_together": {
                    ("afi_safi", "device_content_type", "device_object_id", "peer_group", "peer_endpoint")
                },
            },
        ),
    ]
